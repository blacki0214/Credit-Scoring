import joblib
import numpy as np
import pandas as pd

# --- Load model and scaler ---
model = joblib.load("../output/models/logistic_model.pkl")
scaler = joblib.load("../output/models/scaler.pkl")

print("üí≥ Credit Scoring CLI ‚Äî Logistic Regression Baseline Model")
print("----------------------------------------------------------")
print("Nh·∫≠p c√°c th√¥ng tin kh√°ch h√†ng theo h∆∞·ªõng d·∫´n d∆∞·ªõi ƒë√¢y:")
print("(B·∫•m Enter ƒë·ªÉ s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh trong ngo·∫∑c)\n")

# --- Tooltip h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng nh·∫≠p d·ªØ li·ªáu ---
def get_input(prompt, default):
    """H√†m nh·∫≠n input t·ª´ user v√† chuy·ªÉn sang float, c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh."""
    val = input(f"{prompt} [{default}]: ").strip()
    return float(val) if val != "" else float(default)

# --- Nh·∫≠p d·ªØ li·ªáu t·ª´ user ---
dpd_mean = get_input("Trung b√¨nh s·ªë ng√†y tr·ªÖ h·∫°n (dpd_mean)", 2.0)
dpd_max = get_input("S·ªë ng√†y tr·ªÖ h·∫°n t·ªëi ƒëa (dpd_max)", 10.0)
on_time_ratio = get_input("T·ª∑ l·ªá tr·∫£ ƒë√∫ng h·∫°n (on_time_ratio, t·ª´ 0‚Äì1)", 0.8)
num_payments = get_input("S·ªë k·ª≥ thanh to√°n ƒë√£ ghi nh·∫≠n (num_payments)", 12)
AMT_CREDIT_SUM = get_input("T·ªïng h·∫°n m·ª©c t√≠n d·ª•ng (AMT_CREDIT_SUM)", 150000)
AMT_CREDIT_SUM_DEBT = get_input("T·ªïng d∆∞ n·ª£ hi·ªán t·∫°i (AMT_CREDIT_SUM_DEBT)", 40000)
CREDIT_ACTIVE_FLAG = get_input("S·ªë kho·∫£n vay ƒëang ho·∫°t ƒë·ªông (CREDIT_ACTIVE_FLAG)", 2)
total_utilization = get_input("T·ª∑ l·ªá s·ª≠ d·ª•ng t√≠n d·ª•ng (total_utilization)", 0.25)
credit_card_utilization = get_input("T·ª∑ l·ªá s·ª≠ d·ª•ng th·∫ª t√≠n d·ª•ng (credit_card_utilization)", 0.3)
oldest_account_m = get_input("S·ªë th√°ng k·ªÉ t·ª´ t√†i kho·∫£n l√¢u nh·∫•t (oldest_account_m)", 48)
newest_account_m = get_input("S·ªë th√°ng k·ªÉ t·ª´ t√†i kho·∫£n m·ªõi nh·∫•t (newest_account_m)", 12)
aaoa_m = get_input("Tu·ªïi trung b√¨nh t√†i kho·∫£n (aaoa_m)", 30)
thin_file_flag = get_input("Kh√°ch h√†ng kh√¥ng c√≥ l·ªãch s·ª≠ t√≠n d·ª•ng? (1 = C√≥, 0 = Kh√¥ng)", 0)

# --- T·∫°o DataFrame t·ª´ input ---
data = pd.DataFrame([{
    "dpd_mean": dpd_mean,
    "dpd_max": dpd_max,
    "on_time_ratio": on_time_ratio,
    "num_payments": num_payments,
    "AMT_CREDIT_SUM": AMT_CREDIT_SUM,
    "AMT_CREDIT_SUM_DEBT": AMT_CREDIT_SUM_DEBT,
    "CREDIT_ACTIVE_FLAG": CREDIT_ACTIVE_FLAG,
    "total_utilization": total_utilization,
    "credit_card_utilization": credit_card_utilization,
    "oldest_account_m": oldest_account_m,
    "newest_account_m": newest_account_m,
    "aaoa_m": aaoa_m,
    "thin_file_flag": thin_file_flag
}])

# --- Chu·∫©n h√≥a d·ªØ li·ªáu ---
X_scaled = scaler.transform(data)

# --- D·ª± ƒëo√°n x√°c su·∫•t v·ª° n·ª£ ---
prob_default = model.predict_proba(X_scaled)[0, 1]
prediction = "‚ùå R·ªßi ro cao (C√≥ th·ªÉ v·ª° n·ª£)" if prob_default > 0.5 else "‚úÖ R·ªßi ro th·∫•p (Kh√°ch h√†ng t·ªët)"

# --- In k·∫øt qu·∫£ ---
print("\n----------------------------------------------------------")
print("üîç K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh:")
print(f"‚Üí X√°c su·∫•t v·ª° n·ª£: {prob_default:.2%}")
print(f"‚Üí K·∫øt lu·∫≠n: {prediction}")
print("----------------------------------------------------------")
